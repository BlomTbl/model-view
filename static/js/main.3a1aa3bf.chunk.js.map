{"version":3,"sources":["components/ModelDropZone/index.tsx","mapstyles/water/hydrant.ts","mapstyles/water/main.ts","mapstyles/water/waterIcons.ts","mapstyles/water/meter.ts","mapstyles/water/valve.ts","utils/reproject/index.ts","components/VectorMap/index.tsx","components/TimeSeriesChart/index.tsx","components/FeatureProperties/index.tsx","components/ModelInfo/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["overlayStyle","position","top","right","bottom","left","padding","background","textAlign","color","baseStyle","activeStyle","borderStyle","borderColor","backgroundColor","acceptStyle","rejectStyle","ModelDropZone","_ref","onDroppedJson","children","onDrop","useCallback","acceptedFiles","undefined","reader","FileReader","onload","result","geoJson","JSON","parse","geojsonType","e","console","log","readAsText","_useDropzone","useDropzone","accept","multiple","getRootProps","isDragActive","isDragAccept","isDragReject","style","useMemo","Object","objectSpread","react_default","a","createElement","HydrantStyle","fromJS","id","source","type","paint","circle-opacity","stops","circle-stroke-opacity","circle-color","circle-radius","base","circle-stroke-color","circle-stroke-width","layout","visibility","MainStyle","line-color","line-width","WaterIcons","squareSolid","squareCross","triangleSolid","closedValve","defaultClosedValve","pressureReducing","pressureRelief","pressureSustaining","refluxValve","defaultValve","washoutValve","meter","mapMarker","icons","images","key","iconImage","Image","src","btoa","push","MeterStyle","symbol-placement","icon-image","icon-size","icon-allow-overlap","icon-ignore-placement","minZoom","sensitiveValve","closedValvePCCPRAPSA","closedValveDMA","closedValveWSZ","closedValveWOA","ValveStyle","icon-rotate","text-field","text-font","text-offset","text-anchor","text-size","reprojectFeatureCollection","fromProject","features","featureReduce","previousValue","currentFeature","featureIndex","featureReproject","assign","feature","newFeature","clone","coordEach","currentCoord","newCoord","coord","proj4","reprojectCoord","reprojectFeature","concat","featureCollection","extractAssetType","types","filteredFeatures","filter","properties","includes","table","VectorMap","_map","_addImage","_this","addImage","toJS","_createStyles","props","modelGeoJson","wn_hydrant","wn_pipe","wn_meter","wn_valve","immutBase","OsZoomStackLight","mapStyle","setIn","data","set","get","state","viewport","latitude","longitude","zoom","interactiveLayerIds","_onHover","event","_event$srcEvent","srcEvent","offsetX","offsetY","hoveredFeature","find","f","layer","setState","x","y","_getCursor","isHovering","_onClick","_feature$properties","us_node_id","ds_node_id","link_suffix","node_id","feat","onSelectFeature","_this$state","this","className","name","value","percentile","_this2","esm","mapboxApiAccessToken","process","ref","getMap","onViewportChange","onLoad","onClick","getCursor","width","height","clickRadius","_renderTooltip","Component","TimeSeriesChart","timeseriesData","timesteps","currentTimestep","multipler","reduce","p","c","length","map","timestep","i","max","Math","apply","toConsumableArray","min","domainMax","abs","victory_chart","domain","scale","victory_line","stroke","getTime","FeatureProperties","tsv","selectedFeature","_useState","useState","_useState2","slicedToArray","timeSeriesId","setTimeSeriesId","components_TimeSeriesChart","onChange","evt","target","keyName","keys","constructor","Array","Fragment","toPrecision","toFixed","toString","DefaultContainer","ModelInfo","_ref2","settings","ModelInfo_DefaultContainer","format","step","_onChange","_x","arguments","src_components_FeatureProperties","setting","modeName","t","Date","demand","flow","App","isLoaded","droppedJson","file","prevState","model","substr","_updateSettings","parseInt","_updateSelectedFeature","components_ModelDropZone","components_VectorMap","src_components_ModelInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a1aa3bf.chunk.js","sourcesContent":["import React, { useMemo, useCallback, FunctionComponent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FeatureCollection, Geometries, Properties } from '@turf/helpers';\nimport ModelFeatureCollection from '../../interfaces/ModelFeatureCollection';\nimport { geojsonType } from '@turf/invariant';\n\nconst overlayStyle = {\n  position: \"absolute\",\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  padding: '2.5em 0',\n  background: 'rgba(0,0,0,0.5)',\n  textAlign: 'center',\n  color: '#fff'\n} as React.CSSProperties;\n\n\nconst baseStyle = {\n  position: \"relative\",\n} as React.CSSProperties;\n\nconst activeStyle = {\n  borderStyle: 'solid',\n  borderColor: '#6c6',\n  backgroundColor: '#eee'\n};\n\nconst acceptStyle = {\n  borderStyle: 'solid',\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderStyle: 'solid',\n  borderColor: '#ff1744'\n};\n\n\ntype ModelDropZone = {\n  onDroppedJson: (file: ModelFeatureCollection) => void;\n}\n\n\nconst ModelDropZone: FunctionComponent<ModelDropZone> = ({ onDroppedJson, children }) => {\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    if (acceptedFiles[0] !== undefined) {\n\n      const reader = new FileReader()\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          const geoJson: ModelFeatureCollection = JSON.parse(reader.result)\n          try {\n            geojsonType(geoJson, \"FeatureCollection\", \"Drop Zone\")\n            onDroppedJson(geoJson)\n          } catch (e) {\n            console.log(e);\n            // TODO: Handle if dropped bad JSON data \n          }\n        }\n      }\n\n      reader.readAsText(acceptedFiles[0])\n\n    }\n  }, [])\n\n  const {\n    acceptedFiles,\n    getRootProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({ accept: 'application/json', multiple: false, onDrop });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n      isDragActive,\n      isDragReject\n    ]);\n\n\n\n\n\n\n  return (\n    <div {...getRootProps({ style })}>\n      {isDragActive && <div style={overlayStyle}>Drop files here</div>}\n      {children}\n    </div>\n  );\n}\n\nexport default ModelDropZone","import { fromJS } from 'immutable';\n\nconst layout = { visibility: 'visible' };\nconst paint = {\n  \"circle-opacity\": {\n    stops: [[11.5, 0], [12, 1]]\n  },\n  \"circle-stroke-opacity\": {\n    stops: [[11.5, 0], [12, 1]]\n  },\n\n  'circle-color': [\n    'case',\n    [\"==\", ['get', 'operational'], 'Abandoned'], '#33d935',\n    [\"==\", ['get', 'type'], 'Fire'], '#b300ff',\n    [\"==\", ['get', 'type'], 'Washout'], '#fff',\n    /* other */ '#ccc'\n  ],\n  'circle-radius': {\n    'base': 1,\n    'stops': [[17, 2], [22, 10]]\n  },\n  'circle-stroke-color': [\n    'case',\n    [\"==\", ['get', 'operational'], 'Abandoned'], '#33d935',\n\n    /* other */ '#b300ff'\n  ],\n  'circle-stroke-width': {\n    'base': 0.5,\n    'stops': [[15, 1.25], [22, 4]]\n  },\n\n};\n\n\nconst HydrantStyle = fromJS({\n  id: 'hydrants-geojson',\n  source: 'hydrants',\n  type: 'circle',\n  paint,\n  layout\n});\n\nexport default HydrantStyle","import { fromJS } from 'immutable';\n\nconst layout = { visibility: 'visible' };\n\nconst paint = {\n  'line-color': [\n    'case',\n    [\"==\", ['get', 'operationa'], 'Abandoned'], '#7af500',\n    [\"==\", ['get', 'operationa'], 'Removed'], '#7af500',\n    [\"==\", ['get', 'operationa'], 'Isolated'], '#5e9294',\n    [\"==\", ['get', 'operationa'], 'Proposed'], '#ff7f00',\n    [\"==\", ['get', 'type'], 'Fire'], '#00ffff',\n    [\"==\", ['get', 'type'], 'Distributi'], '#1528f7',\n    [\"==\", ['get', 'type'], 'Trunk'], '#e31a1c',\n    /* other */ '#1528f7'\n  ],\n  'line-width': 2\n};\n\n\nconst MainStyle = fromJS({\n  id: 'main-geojson',\n  source: 'mains',\n  type: 'line',\n  paint,\n  layout\n});\n\nexport default MainStyle\n","const squareSolid = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"#1dbcec\" d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"/></svg>'\nconst squareCross = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"#1dbcec\" d=\"M0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48H48C21.49 32 0 53.49 0 80zm232 0v152H48V86a6 6 0 0 1 6-6h178zM48 280h184v152H54a6 6 0 0 1-6-6V280zm232 152V280h184v146a6 6 0 0 1-6 6H280zm184-200H280V80h178a6 6 0 0 1 6 6v146z\"/></svg>'\nconst triangleSolid = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"#1dbcec\" d=\"M329.6 24c-18.4-32-64.7-32-83.2 0L6.5 440c-18.4 31.9 4.6 72 41.6 72H528c36.9 0 60-40 41.6-72l-240-416z\"/></svg>'\nconst closedValve = (color: String) => { return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 512 512\"><path fill=\"' + color + '\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"></path><path fill=\"currentColor\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200z\"></path><g transform=\"translate(192 256)\"><g transform=\"translate(0, 0)  scale(1, 1)  rotate(0 0 0)\"><path fill=\"currentColor\" d=\"M217.5 256l137.2-137.2c4.7-4.7 4.7-12.3 0-17l-8.5-8.5c-4.7-4.7-12.3-4.7-17 0L192 230.5 54.8 93.4c-4.7-4.7-12.3-4.7-17 0l-8.5 8.5c-4.7 4.7-4.7 12.3 0 17L166.5 256 29.4 393.2c-4.7 4.7-4.7 12.3 0 17l8.5 8.5c4.7 4.7 12.3 4.7 17 0L192 281.5l137.2 137.2c4.7 4.7 12.3 4.7 17 0l8.5-8.5c4.7-4.7 4.7-12.3 0-17L217.5 256z\" transform=\"translate(-130 -260)\"></path></g></g></svg>' }\n\nconst defaultClosedValve = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M476 97Q572 126 633 204T694 380Q694 477 633 555T476 664V97ZM294 664Q199 640 138 564T76 380Q76 269 136 193T294 96V234V446V664ZM0 233T0 387T113 650T388 760Q548 760 660 651T773 387Q773 233 660 123T388 13Q228 13 114 123Z\"/></svg>'\n\nconst defaultValve = (color: String) => { return '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"' + color + '\" d=\"M6 6V786H305V6H6Z\"/></svg>' }\nconst washoutValve = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M378 6V786H677V6H378ZM6 6V786H305V6H6Z\"/></svg>'\n\n\nconst pressureReducing = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M90 78H661V684H90L660 385L90 78ZM17 18V747H740V18H17Z\"/></svg>'\nconst pressureRelief = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M376 381L90 78H661L376 381ZM376 392L661 684H90L376 392ZM17 18V747H740V18H17Z\"/></svg>'\nconst pressureSustaining = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M88 626V148L658 381L88 626ZM661 684H90L661 428V684ZM661 331L90 78H661V331ZM17 18V747H740V18H17Z\"/></svg>'\nconst refluxValve = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M90 78L17 38V716L90 684L660 428V684V747H740V18H660V78V331L90 78Z\"/></svg>'\n\nconst meter = '<svg  xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" viewBox=\"0 0 780 780\"><path fill=\"#b300ff\" d=\"M192 181V596H581V181H192ZM93 82H674V693H93V82ZM17 18V747H740V18H17Z\"/></svg>'\n\nconst mapMarker = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" viewBox=\"0 0 384 512\"><path fill=\"#000\" d=\"M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0z\"/></svg>'\n\n\nconst WaterIcons = {\n  squareSolid,\n  squareCross,\n  triangleSolid,\n  closedValve,\n  defaultClosedValve,\n  pressureReducing,\n  pressureRelief,\n  pressureSustaining,\n  refluxValve,\n  defaultValve,\n  washoutValve,\n  meter,\n  mapMarker\n};\n\nexport default WaterIcons","import { fromJS } from 'immutable';\nimport WaterIcons from './waterIcons'\n\n\nconst layout = {\n  'visibility': 'visible',\n  'symbol-placement': 'line-center',\n  'icon-image': 'meter',\n  'icon-size': {\n    'base': 1.75,\n    'stops': [[10, 0.4], [22, 1]]\n  },\n  'icon-allow-overlap': true,\n  'icon-ignore-placement': true\n};\n\n\nconst icons = {\n  'meter': WaterIcons.meter,\n};\n\nconst images = [];\nfor (const key in icons) {\n  const iconImage = new Image();\n  iconImage.src = 'data:image/svg+xml;charset=utf-8;base64,' + btoa(WaterIcons.meter);\n  images.push([key, iconImage])\n}\n\n\nconst MeterStyle = fromJS({\n  id: 'meter-geojson',\n  source: 'meters',\n  type: 'symbol',\n  images,\n  layout,\n  minZoom: 1\n});\n\nexport default MeterStyle\n","import WaterIcons from './waterIcons'\nimport { fromJS } from 'immutable';\n\nconst layout = {\n  'visibility': 'visible',\n  'symbol-placement': 'line-center',\n  'icon-image': 'valve',\n  'icon-size': {\n    'base': 1.75,\n    'stops': [[10, 0.4], [22, 1]]\n  },\n  'icon-rotate': [\"*\", ['get', 'geom_orien'], -1],\n  'text-field': '{description}',\n  'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n  'text-offset': [0, 0.6],\n  'text-anchor': 'top',\n  'text-size': 8,\n  'icon-allow-overlap': true,\n  'icon-ignore-placement': true\n};\n\n\n\nconst paint = {\n  \"text-color\": \"black\",\n  \"text-halo-color\": \"white\",\n  \"text-halo-width\": 2\n};\n\n\nconst icons = {\n  'defaultValve': WaterIcons.defaultValve(\"#b300ff\"),\n  'sensitiveValve': WaterIcons.defaultValve(\"#ff7f00\"),\n  'washoutValve': WaterIcons.washoutValve,\n  'closedValve': WaterIcons.defaultClosedValve,\n  'closedValvePCCPRAPSA': WaterIcons.closedValve(\"#FFF\"),\n  'closedValveDMA': WaterIcons.closedValve(\"#33a02c\"),\n  'closedValveWSZ': WaterIcons.closedValve(\"#ff7f00\"),\n  'closedValveWOA': WaterIcons.closedValve(\"#e31a1c\"),\n  'pressureReducing': WaterIcons.pressureReducing,\n  'pressureRelief': WaterIcons.pressureRelief,\n  'pressureSustaining': WaterIcons.pressureSustaining,\n  'refluxValve': WaterIcons.refluxValve,\n};\n\nlet images = [];\nfor (const key in icons) {\n  const iconImage = new Image();\n  iconImage.src = 'data:image/svg+xml;charset=utf-8;base64,' + btoa(WaterIcons.defaultValve(\"#b300ff\"));\n  images.push([key, iconImage])\n}\n\nconst ValveStyle = fromJS({\n  id: 'valve-geojson',\n  source: 'valves',\n  type: 'symbol',\n  images,\n  layout,\n  minZoom: 1\n});\n\nexport default ValveStyle","\nimport { FeatureCollection, Geometries, Properties, Feature } from '@turf/helpers';\nimport { featureReduce, coordEach } from '@turf/meta'\nimport clone from '@turf/clone'\nimport { featureCollection } from '@turf/helpers'\nimport proj4 from 'proj4'\n\n\nexport function reprojectFeatureCollection(geoJson: FeatureCollection<Geometries, Properties>, fromProject: string): FeatureCollection {\n\n  const initialValue: Array<Feature> = []\n\n  const features = featureReduce(geoJson, function (previousValue, currentFeature, featureIndex) {\n    const featureReproject = Object.assign({}, currentFeature, reprojectFeature(currentFeature, fromProject))\n    return previousValue.concat(featureReproject)\n  }, initialValue);\n\n  return featureCollection(features)\n\n}\n\n\nexport function reprojectFeature(feature: Feature, fromProject: string): Feature {\n\n  const newFeature = clone(feature)\n\n  coordEach(newFeature, function (currentCoord) {\n    const newCoord = reprojectCoord(currentCoord, fromProject)\n    currentCoord[0] = newCoord[0]\n    currentCoord[1] = newCoord[1]\n  });\n\n  return newFeature\n}\n\nexport function reprojectCoord(coord: number[], fromProject: string): number[] {\n  //@ts-ignore\n  return proj4(fromProject, proj4('EPSG:4326'), coord)\n}\n\n","import React, { Component } from 'react';\nimport ReactMapGL, { PointerEvent, ExtraState } from 'react-map-gl';\nimport { fromJS } from 'immutable';\nimport { OsZoomStackLight, HydrantStyle, MainStyle, MeterStyle, ValveStyle } from '../../mapstyles'\nimport { reprojectFeatureCollection } from '../../utils/reproject'\nimport { FeatureCollection, Feature, Geometries, Properties, featureCollection } from '@turf/helpers';\nimport { MapboxEvent } from 'mapbox-gl';\n\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n\ntype VectorMapProps = {\n  modelGeoJson: FeatureCollection<Geometries, Properties>,\n  onSelectFeature: (value: Feature) => void;\n}\ninterface VectorMapState {\n  modelGeoJson?: FeatureCollection<Geometries, Properties>\n  mapStyle?: any,\n  viewport: any,\n  x?: number,\n  y?: number,\n  hoveredFeature?: any,\n  interactiveLayerIds: string[]\n}\n\n\n\nconst extractAssetType = (geoJson: FeatureCollection, types: string[]) => {\n  const filteredFeatures = geoJson.features.filter(feature => feature.properties !== null && types.includes(feature.properties.table));\n  return featureCollection(filteredFeatures)\n}\n\nclass VectorMap extends Component<VectorMapProps, VectorMapState> {\n\n\n  _map: mapboxgl.Map | null = null\n\n\n\n  _addImage = () => {\n    if (this._map !== null) {\n      this._map.addImage('meter', MeterStyle.toJS().images[0][1])\n      this._map.addImage('valve', ValveStyle.toJS().images[0][1])\n      console.log(MeterStyle.toJS().images[0][1])\n    }\n  }\n\n  _createStyles = () => {\n\n\n\n    const fromProjection = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=375,-111,431,0,0,0,0 +units=m +no_defs'\n    const geoJson = reprojectFeatureCollection(this.props.modelGeoJson, fromProjection)\n    console.log(geoJson)\n    const wn_hydrant = extractAssetType(geoJson, ['wn_hydrant'])\n    const wn_pipe = extractAssetType(geoJson, ['wn_pipe', 'wn_meter', 'wn_valve'])\n    const wn_meter = extractAssetType(geoJson, ['wn_meter'])\n    const wn_valve = extractAssetType(geoJson, ['wn_valve'])\n\n    const immutBase = fromJS(OsZoomStackLight)\n    const mapStyle = immutBase\n      .setIn(['sources', 'hydrants'], fromJS({ type: 'geojson', data: wn_hydrant }))\n      .setIn(['sources', 'mains'], fromJS({ type: 'geojson', data: wn_pipe }))\n      .setIn(['sources', 'meters'], fromJS({ type: 'geojson', data: wn_meter }))\n      .setIn(['sources', 'valves'], fromJS({ type: 'geojson', data: wn_valve }))\n      .set('layers', immutBase.get('layers')\n        .push(MainStyle)\n        .push(HydrantStyle)\n        .push(MeterStyle)\n        .push(ValveStyle)\n      )\n\n\n    console.log(mapStyle.toJS())\n\n    return mapStyle\n  }\n\n  state: Readonly<VectorMapState> = {\n    viewport: {\n      latitude: 56.83955911423721,\n      longitude: -2.287646619512958,\n      zoom: 10\n    },\n    mapStyle: this._createStyles(),\n    interactiveLayerIds: ['hydrants-geojson', 'main-geojson']\n  };\n\n  _onHover = (event: PointerEvent) => {\n    const { features, srcEvent: { offsetX, offsetY } } = event;\n    const hoveredFeature = features && features.find(f => f.layer.id === 'hydrants-geojson');\n    this.setState({ hoveredFeature, x: offsetX, y: offsetY });\n  };\n\n  _renderTooltip() {\n    const { hoveredFeature, x, y } = this.state;\n\n    return hoveredFeature && (\n      <div className=\"tooltip\" style={{ left: x, top: y }}>\n        <div>State: {hoveredFeature.properties.name}</div>\n        <div>Median Household Income: {hoveredFeature.properties.value}</div>\n        <div>Percentile: {hoveredFeature.properties.percentile / 8 * 100}</div>\n      </div>\n    );\n  }\n\n  _getCursor = (event: ExtraState) => {\n    return event.isHovering ? 'pointer' : 'default';\n  };\n\n  //TODO: This is a mess, I need to clean this up, there is probably an easy oneliner here I'm not thinking of\n  _onClick = (event: PointerEvent) => {\n    const feature = event.features && event.features[0];\n\n    if (feature) {\n\n      const { us_node_id, ds_node_id, link_suffix, node_id } = feature.properties\n      const feat = this.props.modelGeoJson.features.find(f => {\n        if (f.properties !== null) {\n          if (f.properties.us_node_id !== undefined) {\n            return f.properties.us_node_id === us_node_id && f.properties.ds_node_id === ds_node_id && f.properties.link_suffix === link_suffix\n          } else {\n            return f.properties.node_id === node_id\n          }\n        }\n        else return false\n      })\n\n      feat && this.props.onSelectFeature(feat)\n\n    }\n\n\n  };\n\n\n\n\n\n\n\n  render() {\n    const { mapStyle } = this.state;\n\n    return (\n      <ReactMapGL\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n        {...this.state.viewport}\n        mapStyle={mapStyle}\n        ref={ref => {\n          if (ref && ref.getMap()) {\n            this._map = ref.getMap()\n          }\n        }}\n        onViewportChange={(viewport) => this.setState({ viewport })}\n        onLoad={() => { this._addImage() }}\n        //onHover={this._onHover}\n        onClick={this._onClick}\n        getCursor={this._getCursor}\n        width=\"100%\"\n        height=\"100vh\"\n        interactiveLayerIds={this.state.interactiveLayerIds}\n        clickRadius={2}\n      >\n        {this._renderTooltip()}\n      </ReactMapGL>\n    );\n  }\n}\n\n\nexport default VectorMap","import React, { FunctionComponent, useState } from 'react';\nimport { VictoryChart, VictoryLine } from 'victory';\nimport { ModelInfoSetting } from '../ModelInfo';\nimport { debug } from 'util';\n\n\ntype TimeSeriesChartProps = {\n  timeseriesData: number[],\n  timesteps: Date[],\n  currentTimestep: number\n}\n\n\nconst TimeSeriesChart: FunctionComponent<TimeSeriesChartProps> = ({ timeseriesData, timesteps, currentTimestep }) => {\n\n  const avgData = timeseriesData.reduce((p, c) => p + c, 0) / timeseriesData.length;\n  const multipler = avgData >= 0 ? 1 : -1\n\n  const data = timesteps.map((timestep, i) => ({ \"x\": timestep, \"y\": timeseriesData[i] * multipler }))\n  const max = Math.max(...timeseriesData)\n  const min = Math.min(...timeseriesData)\n  const domainMax = Math.max(Math.abs(max), Math.abs(min))\n\n  return (\n    <div>\n      <VictoryChart domain={{ y: [0, domainMax] }} width={500} height={180} scale={{ x: \"time\" }}\n      >\n        <VictoryLine style={{\n          data: { stroke: \"tomato\" }\n        }} x={() => timesteps[currentTimestep].getTime()} />\n        <VictoryLine\n          data={data}\n          style={{\n            data: { stroke: \"#1528f7\" }\n          }}\n\n        />\n      </VictoryChart>\n    </div>\n  );\n}\n\n\nexport default TimeSeriesChart","import React, { FunctionComponent, useState, useRef, useEffect } from 'react';\nimport TimeSeriesChart from '../TimeSeriesChart';\nimport { Properties } from '@turf/helpers';\nimport { ModelInfoSetting } from '../ModelInfo';\nimport { debug } from 'util';\nimport './index.css';\n\ntype FeatureProperties = {\n  feature: ModelInfoSetting,\n  tsv: string[]\n}\n\n\nconst FeatureProperties: FunctionComponent<FeatureProperties> = ({ feature, tsv }) => {\n\n  const { selectedFeature } = feature\n  //const selectId = Object.keys(selectedFeature).find(key => selectedFeature[key].constructor === Array)\n  const [timeSeriesId, setTimeSeriesId] = useState(tsv[0])\n\n  const precise = (x: number): string => {\n    return x < 0 ? x.toPrecision(2) : x.toFixed(2).toString()\n\n  }\n\n\n  return (\n    <div>\n      {\n\n        <TimeSeriesChart timeseriesData={selectedFeature[timeSeriesId]} currentTimestep={feature.currentTimestep} timesteps={feature.timesteps} />\n      }\n      <form className=\"tvd-form\">\n        <label>Plot Data: </label>\n        <select id=\"timeseries-select\" value={timeSeriesId} onChange={evt => setTimeSeriesId(evt.target.value)}>\n          {tsv.map((keyName) => (\n            <option key={keyName} value={keyName}>{keyName}</option>\n          ))}\n        </select>\n      </form>\n      <div className=\"control-panel-data\">\n        <table className=\"feature-data-table\">\n          <tbody>\n            {Object.keys(selectedFeature).map((keyName, i) => (\n              <tr key={i}>\n                {(selectedFeature[keyName].constructor !== Array) ?\n                  <><th>{keyName}</th><td>{selectedFeature[keyName]}</td></>\n                  :\n                  <><th>{keyName}</th><td>{precise(selectedFeature[keyName][feature.currentTimestep])}</td></>\n                }\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n\n  )\n\n}\n\nexport default FeatureProperties","import React, { PureComponent, FunctionComponent } from 'react';\nimport { Properties } from '@turf/helpers';\nimport FeatureProperties from '../FeatureProperties';\nimport format from 'date-fns/format'\nimport './index.css';\n\n\nexport const testFeature = {\n\n  \"table\": \"wn_meter\", \"us_node_id\": \"12345\", \"ds_node_id\": \"67899\", \"link_suffix\": \"1\",\n  \"demand\": [0.08589446544647217, 0.08556421101093292, 0.07438356429338455, 0.06912852823734283, 0.06649583578109741, 0.05993024632334709, 0.05730804055929184, 0.05993956699967384, 0.062241844832897186, 0.0596310980618, 0.05927985906600952, 0.05730888247489929, 0.05535764992237091, 0.052394669502973557, 0.056656934320926666, 0.053045403212308884, 0.05139247328042984, 0.05515359342098236, 0.05570881813764572, 0.05600768327713013, 0.061911553144454956, 0.06454535573720932, 0.0738489106297493, 0.08676840364933014, 0.09738458693027496, 0.12088033556938171, 0.14887462556362152, 0.18509383499622345, 0.2492588311433792, 0.2250021994113922, 0.21893805265426636, 0.2766243517398834, 0.26707175374031067, 0.2505423128604889, 0.2510850131511688, 0.25116896629333496, 0.2271173745393753, 0.21376200020313263, 0.2110820859670639, 0.21064259111881256, 0.21042300760746002, 0.21020343899726868, 0.20778897404670715, 0.21104936301708221, 0.18771836161613464, 0.18278305232524872, 0.17161284387111664, 0.16145595908164978, 0.16634704172611237, 0.16111503541469574, 0.16209428012371063, 0.1558629721403122, 0.14829492568969727, 0.15322619676589966, 0.14731156826019287, 0.13779470324516296, 0.1423756331205368, 0.13123756647109985, 0.1384422332048416, 0.1338433474302292, 0.11447832733392715, 0.11840414255857468, 0.11512225866317749, 0.11905406415462494, 0.11905469745397568, 0.11152325570583344, 0.09180673211812973, 0.11486421525478363, 0.10791705548763275, 0.10428173094987869, 0.0914999321103096, 0.09904778003692627, 0.14044232666492462, 0.15419620275497437, 0.14172717928886414, 0.13909314572811127, 0.1460084319114685, 0.14731070399284363, 0.14797158539295197, 0.14732150733470917, 0.19229739904403687, 0.1818249374628067, 0.20252828299999237, 0.20780909061431885, 0.23640543222427368, 0.21490885317325592, 0.21385295689105988, 0.21142305433750153, 0.19331733882427216, 0.19627666473388672, 0.16112513840198517, 0.17392507195472717, 0.16310721635818481, 0.16624052822589874, 0.1513095498085022, 0.16034595668315887, 0.15063130855560303, 0.1525116264820099, 0.14482755959033966, 0.12896762788295746, 0.11669924855232239, 0.1156969666481018, 0.10026378184556961, 0.09370825439691544],\n  \"flow\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n\n}\n\n\ntype DefaultContainer = {}\n\nconst DefaultContainer: FunctionComponent<DefaultContainer> = ({ children }) => <div className=\"control-panel\">{children}</div>;\n\nexport interface ModelInfoSetting {\n  modeName: string,\n  currentTimestep: number,\n  timesteps: Date[],\n  selectedFeature: { [name: string]: any; }\n}\n\n\ntype ModelInfoProps = {\n  settings: ModelInfoSetting,\n  onChange: (value: string) => void;\n}\n\n\nconst ModelInfo: FunctionComponent<ModelInfoProps> = ({ settings, onChange }) => {\n\n  return (\n    <DefaultContainer>\n      <div>\n        <h2>{format(\n          settings.timesteps[settings.currentTimestep],\n          'Do MMMM YY'\n        )}</h2>\n        <h1>{format(\n          settings.timesteps[settings.currentTimestep],\n          'HH:mm'\n        )}</h1>\n        <div key={name} className=\"input\">\n          <input type=\"range\" value={settings.currentTimestep}\n            min={0} max={settings.timesteps.length - 1} step={1}\n            onChange={evt => onChange(evt.target.value)}\n          />\n        </div>\n      </div>\n      <hr />\n      {settings.selectedFeature &&\n        <FeatureProperties key={settings.selectedFeature.us_node_id} feature={settings} tsv={Object.keys(settings.selectedFeature).filter(key => settings.selectedFeature[key].constructor === Array)} />\n      }\n\n\n    </DefaultContainer>\n  );\n}\n\n\nexport default ModelInfo\n","import React, { Component } from 'react';\nimport ModelDropZone from '../ModelDropZone';\nimport VectorMap from '../VectorMap';\nimport ModelInfo, { ModelInfoSetting, testFeature } from '../ModelInfo';\nimport ModelFeatureCollection from '../../interfaces/ModelFeatureCollection';\nimport './index.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { FeatureCollection, Geometries, Properties, Feature } from '@turf/helpers';\n\n\nconst setting: ModelInfoSetting = {\n  \"modeName\": \"Test Model\",\n  \"currentTimestep\": 0,\n  \"timesteps\": [\"2018-01-31T00:00:00\", \"2018-01-31T00:15:00\", \"2018-01-31T00:30:00\", \"2018-01-31T00:45:00\", \"2018-01-31T01:00:00\", \"2018-01-31T01:15:00\", \"2018-01-31T01:30:00\", \"2018-01-31T01:38:00\", \"2018-01-31T01:45:00\", \"2018-01-31T02:00:00\", \"2018-01-31T02:15:00\", \"2018-01-31T02:30:00\", \"2018-01-31T02:45:00\", \"2018-01-31T03:00:00\", \"2018-01-31T03:15:00\", \"2018-01-31T03:30:00\", \"2018-01-31T03:45:00\", \"2018-01-31T04:00:00\", \"2018-01-31T04:15:00\", \"2018-01-31T04:30:00\", \"2018-01-31T04:45:00\", \"2018-01-31T05:00:00\", \"2018-01-31T05:15:00\", \"2018-01-31T05:30:00\", \"2018-01-31T05:45:00\", \"2018-01-31T06:00:00\", \"2018-01-31T06:15:00\", \"2018-01-31T06:30:00\", \"2018-01-31T06:45:00\", \"2018-01-31T06:57:00\", \"2018-01-31T07:00:00\", \"2018-01-31T07:15:00\", \"2018-01-31T07:30:00\", \"2018-01-31T07:45:00\", \"2018-01-31T07:58:00\", \"2018-01-31T08:00:00\", \"2018-01-31T08:09:00\", \"2018-01-31T08:14:00\", \"2018-01-31T08:15:00\", \"2018-01-31T08:17:00\", \"2018-01-31T08:18:00\", \"2018-01-31T08:19:00\", \"2018-01-31T08:30:00\", \"2018-01-31T08:45:00\", \"2018-01-31T09:00:00\", \"2018-01-31T09:15:00\", \"2018-01-31T09:30:00\", \"2018-01-31T09:45:00\", \"2018-01-31T10:00:00\", \"2018-01-31T10:15:00\", \"2018-01-31T10:30:00\", \"2018-01-31T10:45:00\", \"2018-01-31T11:00:00\", \"2018-01-31T11:15:00\", \"2018-01-31T11:30:00\", \"2018-01-31T11:45:00\", \"2018-01-31T12:00:00\", \"2018-01-31T12:15:00\", \"2018-01-31T12:30:00\", \"2018-01-31T12:45:00\", \"2018-01-31T13:00:00\", \"2018-01-31T13:15:00\", \"2018-01-31T13:30:00\", \"2018-01-31T13:45:00\", \"2018-01-31T14:00:00\", \"2018-01-31T14:15:00\", \"2018-01-31T14:30:00\", \"2018-01-31T14:45:00\", \"2018-01-31T15:00:00\", \"2018-01-31T15:15:00\", \"2018-01-31T15:30:00\", \"2018-01-31T15:45:00\", \"2018-01-31T16:00:00\", \"2018-01-31T16:15:00\", \"2018-01-31T16:30:00\", \"2018-01-31T16:45:00\", \"2018-01-31T17:00:00\", \"2018-01-31T17:15:00\", \"2018-01-31T17:30:00\", \"2018-01-31T17:45:00\", \"2018-01-31T18:00:00\", \"2018-01-31T18:15:00\", \"2018-01-31T18:30:00\", \"2018-01-31T18:45:00\", \"2018-01-31T19:00:00\", \"2018-01-31T19:15:00\", \"2018-01-31T19:30:00\", \"2018-01-31T19:45:00\", \"2018-01-31T20:00:00\", \"2018-01-31T20:15:00\", \"2018-01-31T20:30:00\", \"2018-01-31T20:45:00\", \"2018-01-31T21:00:00\", \"2018-01-31T21:15:00\", \"2018-01-31T21:30:00\", \"2018-01-31T21:45:00\", \"2018-01-31T22:00:00\", \"2018-01-31T22:15:00\", \"2018-01-31T22:30:00\", \"2018-01-31T22:45:00\", \"2018-01-31T23:00:00\", \"2018-01-31T23:15:00\", \"2018-01-31T23:30:00\", \"2018-01-31T23:45:00\"].map(t => new Date(t)),\n  \"selectedFeature\": testFeature\n}\n\ntype Props = {}\n\n\ninterface AppState {\n  modelGeoJson?: FeatureCollection<Geometries, Properties>\n  isLoaded: boolean,\n  setting: ModelInfoSetting\n}\n\n\nclass App extends Component<Props, AppState> {\n  state: Readonly<AppState> = {\n    isLoaded: false,\n    setting\n  };\n\n\n  droppedJson = (file: ModelFeatureCollection) => {\n\n    this.setState(prevState => ({\n      modelGeoJson: file,\n      setting: {\n        ...prevState.setting,\n        timesteps: file.model.timesteps.map(t => new Date(t.substr(0, 16)))\n      }\n    }));\n  }\n  _updateSettings = (value: string) => {\n    this.setState(prevState => ({\n      setting: {\n        ...prevState.setting,\n        currentTimestep: parseInt(value)\n      }\n    }))\n\n  };\n\n  _updateSelectedFeature = (value: Feature) => {\n\n    if (value.properties !== null) {\n      const selectedFeature: { [name: string]: any; } = value.properties\n      this.setState(prevState => ({\n        setting: {\n          ...prevState.setting,\n          selectedFeature\n        }\n      }))\n    }\n\n  };\n\n\n  render() {\n    const { isLoaded, modelGeoJson, setting } = this.state\n\n    return (\n      <ModelDropZone onDroppedJson={this.droppedJson}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n\n            {modelGeoJson &&\n              <>\n                <VectorMap onSelectFeature={this._updateSelectedFeature} modelGeoJson={modelGeoJson} />\n                <ModelInfo settings={setting} onChange={this._updateSettings} />\n\n\n              </>\n            }\n          </header>\n\n        </div>\n      </ModelDropZone>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}